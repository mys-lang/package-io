@trait
class Reader:

    def read(self, size: u64) -> bytes:
        """Read given number of bytes. Always returns size number of bytes,
        unless the connection was closed, in which case the remaining
        data is returned.

        """

    def read_into(self, data: bytes, start: u64, size: u64) -> u64:
        """Read given number of bytes into given buffer. Always returns size
        number of bytes, unless the connection was closed, in which
        case the remaining number of bytes is returned.

        """

        offset: u64 = 0

        while offset < size:
            value = self.read(1)

            if len(value) == 0:
                break

            data[i64(start + offset)] = value[0]
            offset += 1

        return offset

    def try_read_into(self, data: bytes, start: u64, size: u64) -> u64:
        """Try to read given number of bytes into given buffer. Returns number
        of read bytes, which is at least one and at most given size
        bytes, unless the connection was closed, in which case the
        remaining number of bytes is returned.

        """

        return self.read_into(data, start, 1)
