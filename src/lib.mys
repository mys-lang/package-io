@trait
class Reader:

    func read(self, size: u64) -> bytes:
        """Read given number of bytes. Always returns size number of bytes,
        unless the connection was closed, in which case the remaining
        data is returned.

        """

    func read_into(self, data: bytes, start: u64, size: u64) -> u64:
        """Read given number of bytes into given buffer. Always returns size
        number of bytes, unless the connection was closed, in which
        case the number of read bytes is returned.

        """

        chunk = self.read(size)
        data.copy_into(chunk, 0, len(chunk), start)

        return len(chunk)

    func try_read_into(self, data: bytes, start: u64, size: u64) -> u64:
        """Try to read given number of bytes into given buffer. Returns number
        of read bytes, which is at least one and at most given size
        bytes, unless the connection was closed, in which case the
        number of read bytes is returned.

        """

        return self.read_into(data, start, 1)

@trait
class Writer:

    func write(self, data: bytes):
        """Write given data.

        """

    func write_from(self, data: bytes, start: u64, size: u64):
        """Write from given buffer.

        """

        value = bytes(size)
        value.copy_into(data, start, size, 0)
        self.write(value)
