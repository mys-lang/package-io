from . import Reader

class BufferedReader(Reader):
    """Efficient reading of any amount of bytes. Small reads are using an
    internal buffer for fewer calls to the underlying reader, while
    big reads are read directly into given destination buffer.

    """

    _reader: Reader
    _buffer: bytes
    _offset: u64
    _size: u64

    func __init__(self, reader: Reader, size: u64 = 64):
        """Create a buffered reader that reads from given reader. Size is the
        size of the internal buffer.

        """

        self._reader = reader
        self._buffer = bytes(size)
        self._offset = 0
        self._size = 0

    func read(self, size: u64) -> bytes:
        """Read given number of bytes. Always returns size number of bytes,
        unless the connection was closed, in which case the remaining
        number of bytes is returned.

        """

        value = bytes(size)
        offset: u64 = 0

        if self._size > 0:
            if size <= self._size:
                value.copy_into(self._buffer, self._offset, self._offset + size, 0)
                self._offset += size
                self._size -= size

                return value
            else:
                value.copy_into(self._buffer,
                                self._offset,
                                self._offset + self._size,
                                0)
                offset = self._size
                self._offset = 0
                self._size = 0

        left = size - offset

        if left < len(self._buffer):
            read_offset: u64 = 0

            while read_offset < left:
                read = self._reader.try_read_into(self._buffer,
                                                  read_offset,
                                                  len(self._buffer) - read_offset)

                if read == 0:
                    value.copy_into(self._buffer, 0, read_offset, offset)
                    value.resize(i64(offset + read_offset))

                    return value

                read_offset += read

            self._offset = left
            self._size = read_offset - self._offset
            value.copy_into(self._buffer, 0, self._offset, offset)
        else:
            read = self._reader.read_into(value, offset, size - offset)
            value.resize(i64(offset + read))

        return value

    func read_until(self, pattern: bytes, keep_pattern: bool = True) -> bytes:
        """Read until given pattern is found. Returns None if the pattern was
        not found before the reader was closed.

        """

        value = b""

        while not value.ends_with(pattern):
            data = self.read(1)

            if len(data) == 0:
                return None

            value += data

        if not keep_pattern:
            value.resize(i64(len(value) - len(pattern)))

        return value

class _Reader(Reader):
    data: bytes
    _offset: u64

    func _readable(self, size: u64) -> u64:
        left = len(self.data) - self._offset

        if size > left:
            size = left

        return size

    func read(self, size: u64) -> bytes:
        value = b""
        size = self._readable(size)

        for i in range(i64(size)):
            value += self.data[i64(self._offset) + i]

        self._offset += size

        return value

    func read_into(self, data: bytes, start: u64, size: u64) -> u64:
        size = self._readable(size)

        for i in range(i64(size)):
            data[i64(start) + i] = self.read(1)[0]

        return size

    func try_read_into(self, data: bytes, start: u64, size: u64) -> u64:
        return self.read_into(data, start, self._readable(size))

@test
func test_mixed():
    foo = BufferedReader(
        _Reader(
            b"012345678901234567890123456789012345678901234567890123456789"
            b"012345678901234567890123456789"))
    assert foo.read(1) == b"0"
    assert foo.read(2) == b"12"
    assert foo.read_until(b"5") == b"345"
    assert foo.read_until(b"6", keep_pattern=False) == b""
    assert foo.read_until(b"8", keep_pattern=True) == b"78"
    assert foo.read(70) == (
        b"9012345678901234567890123456789012345678901234567890123456789012345678")
    assert foo.read(1) == b"9"
    assert foo.read(100) == b"0123456789"
    assert foo.read(1) == b""

@test
func test_read_until_error():
    foo = BufferedReader(_Reader(b"0123456789"))
    assert foo.read_until(b"g") is None

@test
func test_read_into():
    reader = BufferedReader(
        _Reader(
            b"\x12\x34\x56\x78\x9a\xbc\xde\x01\x23\x45\x67\x89\xab\xcd\xef"))
    data = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    assert reader.read_into(data, 0, 1) == 1
    assert data == b"\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    assert reader.read_into(data, 1, 3) == 3
    assert data == b"\x12\x34\x56\x78\x00\x00\x00\x00\x00\x00"
    assert reader.read_into(data, 3, 2) == 2
    assert data == b"\x12\x34\x56\x9a\xbc\x00\x00\x00\x00\x00"
    assert reader.try_read_into(data, 9, 1) == 1
    assert data == b"\x12\x34\x56\x9a\xbc\x00\x00\x00\x00\xde"
    assert reader.read_into(data, 1, 10) == 8
    assert data == b"\x12\x01\x23\x45\x67\x89\xab\xcd\xef\xde"
